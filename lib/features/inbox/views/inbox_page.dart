import 'package:auto_route/annotations.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:nusa_app/core/services/fcm_service.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import '../model/message_item.dart';
import '../model/notification_item.dart';
import '../widget/notification_tile.dart';

@RoutePage()
class InboxPage extends StatefulWidget {
  const InboxPage({super.key});

  @override
  State<InboxPage> createState() => _InboxPageState();
}

class _InboxPageState extends State<InboxPage>
    with SingleTickerProviderStateMixin {
  late TabController _tabController;
  List<NotificationItem> systemNotifications = [];
  List<MessageItem> forumMessages = [];

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 2, vsync: this, initialIndex: 1);
    _initializeFCM();
    _loadNotifications();
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  Future<void> _initializeFCM() async {
    // Setup FCM listeners untuk menerima notifikasi
    FCMService.setupOnMessageListener();
    await FCMService.setupOnMessageOpenedAppListener();

    // Listen for foreground messages
    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      _handleForegroundMessage(message);
    });

    // Listen for background messages
    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      _handleBackgroundMessage(message);
    });
  }

  void _handleForegroundMessage(RemoteMessage message) {
    final data = message.data;
    final type = data['type'];

    if (type == 'like' || type == 'comment') {
      setState(() {
        forumMessages.insert(0, MessageItem(
          title: message.notification?.title ?? 'Forum Notification',
          message: message.notification?.body ?? '',
          date: _formatDate(DateTime.now()),
          iconData: type == 'like' ? Icons.favorite : Icons.comment,
          iconColor: type == 'like' ? Colors.red : Colors.blue,
          notificationType: type,
          data: data,
        ));
      });
    }
  }

  void _handleBackgroundMessage(RemoteMessage message) {
    final data = message.data;
    final type = data['type'];

    if (type == 'like' || type == 'comment') {
      // Handle navigation or other actions when notification is tapped
      print('Background message tapped: ${message.data}');
      // TODO: Navigate to specific forum post if needed
    }
  }

  Future<void> _loadNotifications() async {
    // Load existing notifications from local storage or API
    _loadSystemNotifications();
    _loadForumMessages();
  }

  void _loadSystemNotifications() {
    systemNotifications = [
      NotificationItem(
        title: 'Welcome to Nusa!',
        message: 'Welcome to Nusa! Get ready to explore Indonesia\'s traditions, heritage, and more â€” all generated by AI, just for you.',
        date: '16-08-2022',
        iconData: Icons.campaign,
        iconColor: Colors.blue,
      ),
    ];
  }

  void _loadForumMessages() {
    // Load forum messages from storage or API
    // This is placeholder data - replace with actual data loading
    forumMessages = [
      MessageItem(
        title: 'Eduplex Space',
        message: 'Halo',
        date: '16-08-2022',
        avatarImage: 'assets/images/eduplex.jpg',
      ),
      MessageItem(
        title: 'Ruang Kerja',
        message: 'Halo',
        date: '15-08-2022',
        iconData: Icons.business,
        iconColor: Colors.blue,
      ),
      MessageItem(
        title: 'Ciwalk Coworking Space',
        message: 'Halo',
        date: '15-08-2022',
        avatarImage: 'assets/images/ciwalk.jpg',
      ),
      MessageItem(
        title: 'De Paris Caffe and Space',
        message: 'Halo',
        date: '12-08-2022',
        avatarImage: 'assets/images/deparis.jpg',
      ),
      MessageItem(
        title: 'Sans Coworking Space',
        message: 'Halo',
        date: '10-08-2022',
        avatarImage: 'assets/images/sans.jpg',
      ),
    ];
  }

  String _formatDate(DateTime date) {
    return '${date.day.toString().padLeft(2, '0')}-${date.month.toString().padLeft(2, '0')}-${date.year}';
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[50],
      appBar: AppBar(
        backgroundColor: Colors.white,
        elevation: 0,
        title: const Text(
          'Inbox',
          style: TextStyle(
            color: Colors.black,
            fontSize: 24,
            fontWeight: FontWeight.w600,
          ),
        ),
        centerTitle: true,
        bottom: PreferredSize(
          preferredSize: const Size.fromHeight(48),
          child: Container(
            color: Colors.white,
            child: TabBar(
              controller: _tabController,
              indicatorColor: Colors.blue,
              indicatorWeight: 2,
              labelColor: Colors.blue,
              unselectedLabelColor: Colors.grey[600],
              labelStyle: const TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.w500,
              ),
              unselectedLabelStyle: const TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.w400,
              ),
              tabs: [
                const Tab(text: 'Notifications'),
                Tab(text: 'Messages (${forumMessages.length})'),
              ],
            ),
          ),
        ),
      ),
      body: TabBarView(
        controller: _tabController,
        children: [
          // Notifications Tab
          _buildNotificationsList(),
          // Messages Tab
          _buildMessagesList(),
        ],
      ),
    );
  }

  Widget _buildNotificationsList() {
    return ListView.separated(
      padding: const EdgeInsets.all(0),
      itemCount: systemNotifications.length,
      separatorBuilder: (context, index) => const Divider(
        height: 1,
        color: Colors.grey,
        indent: 70,
      ),
      itemBuilder: (context, index) {
        final notification = systemNotifications[index];
        return NotificationTile(
          title: notification.title,
          message: notification.message,
          date: notification.date,
          iconData: notification.iconData,
          iconColor: notification.iconColor,
        );
      },
    );
  }

  Widget _buildMessagesList() {
    return ListView.separated(
      padding: const EdgeInsets.all(0),
      itemCount: forumMessages.length,
      separatorBuilder: (context, index) => const Divider(
        height: 1,
        color: Colors.grey,
        indent: 70,
      ),
      itemBuilder: (context, index) {
        final message = forumMessages[index];
        return _buildMessageTile(
          title: message.title,
          message: message.message,
          date: message.date,
          avatarImage: message.avatarImage,
          iconData: message.iconData,
          iconColor: message.iconColor,
          notificationType: message.notificationType,
          onTap: () => _handleMessageTap(message),
        );
      },
    );
  }

  void _handleMessageTap(MessageItem message) {
    // Handle tap based on notification type
    if (message.notificationType == 'like' || message.notificationType == 'comment') {
      // Navigate to specific forum post
      final postId = message.data?['post_id'] ?? message.data?['forum_id'];
      if (postId != null) {
        // TODO: Navigate to forum detail page
        print('Navigate to forum post: $postId');
        // context.router.pushNamed('/forum/detail/$postId');
      }
    }
  }

  Widget _buildMessageTile({
    required String title,
    required String message,
    required String date,
    String? avatarImage,
    IconData? iconData,
    Color? iconColor,
    String? notificationType,
    VoidCallback? onTap,
  }) {
    // Determine icon and color based on notification type
    IconData displayIcon = iconData ?? Icons.person;
    Color displayColor = iconColor ?? Colors.grey[600]!;

    if (notificationType == 'like') {
      displayIcon = Icons.favorite;
      displayColor = Colors.red;
    } else if (notificationType == 'comment') {
      displayIcon = Icons.comment;
      displayColor = Colors.blue;
    }

    return Container(
      color: Colors.white,
      child: ListTile(
        contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
        leading: Container(
          width: 50,
          height: 50,
          decoration: BoxDecoration(
            color: avatarImage != null ? Colors.grey[300] : displayColor,
            shape: BoxShape.circle,
          ),
          child: avatarImage != null
              ? ClipRRect(
            borderRadius: BorderRadius.circular(25),
            child: Container(
              color: Colors.grey[300],
              child: const Icon(
                Icons.image,
                color: Colors.grey,
                size: 24,
              ),
            ),
          )
              : Icon(
            displayIcon,
            color: Colors.white,
            size: 24,
          ),
        ),
        title: Text(
          title,
          style: const TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.w600,
            color: Colors.black,
          ),
        ),
        subtitle: Padding(
          padding: const EdgeInsets.only(top: 4),
          child: Text(
            message,
            style: TextStyle(
              fontSize: 14,
              color: Colors.grey[600],
            ),
          ),
        ),
        trailing: Text(
          date,
          style: TextStyle(
            fontSize: 12,
            color: Colors.grey[500],
          ),
        ),
        onTap: onTap,
      ),
    );
  }
}